generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  

  onboardingCompleted Boolean @default(false)

  userType UserType?

  stripeCustomerId String? @unique

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Company      Company?
  JobSeeker    JobSeeker?
  SavedJobPost SavedJobPost[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}


enum UserType {
  COMPANY
  JOB_SEEKER
}

model Company {
  id String @id @default(uuid())

  name     String
  location String
  logo     String
  
  about    String
  user     User    @relation(fields: [userId], references: [id])
  userId   String  @unique

  website  String?
  xAccount String?
  industry        String?
  companySize     String?  // Taille de l'entreprise (0-10, 11-50, etc.)
  countryCode     String?  // Code pays pour filtrage géographique
  city            String?
  phoneNumber     String?
  linkedinProfile String?
  languages       String[] // Langues de travail

  // Ajout des nouvelles relations
  savedFilters    CandidateFilter[]
  viewedCandidates ViewedCandidate[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  JobPost   JobPost[]

  
}


model JobSeeker {
  id     String @id @default(uuid())
  firstName       String    // Obligatoire, min 2 chars
  lastName        String    // Obligatoire, min 2 chars
  email           String    @unique  // Obligatoire, format email
  about           String    // Obligatoire, min 10 chars
  resume          String    // Obligatoire
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  title           String        // Poste actuel/recherché, Obligatoire, min 2 chars
  experience      Int           // Années d'expérience, Obligatoire, >= 0
  
  skills          String[]      // Compétences, Obligatoire, min 1 élément
  languages       String[]      // Langues maîtrisées, Obligatoire, min 1 élément

// Champs optionnels
  education       Education[]   // Relation avec le modèle Education
  countryCode     String?        // Localisation
  city            String?
  phoneNumber     String?
  linkedinProfile String?
  portfolioUrl    String?
  expectedSalary  Int?

  // Champs obligatoires avec des valeurs spécifiques
  availability    Availability  // IMMEDIATE, ONE_MONTH, etc.
  preferredJobType JobType[]   // FULL_TIME, PART_TIME, etc.
  
// Ajout de la nouvelle relation
  viewedBy        ViewedCandidate[]

  jobApplications JobApplication[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobPost {
  id String @id @default(uuid())

  jobTitle        String
  employmentType  String
  location        String
  salaryFrom      Int
  salaryTo        Int
  jobDescription  String
  listingDuration Int
  benefits        String[]

  

  status       JobPostStatus @default(DRAFT)
  // applications Int           @default(0)


  // requiredSkills    String[]
  // requiredLanguages String[]
  // experienceLevel   ExperienceLevel?
  // educationLevel    EducationLevel?
  // jobType           JobType[]
  // remote            Boolean  @default(false)
  // currency          String?   // Pour gérer différentes devises africaines
  applications      JobApplication[]
  // views             Int      @default(0)
  // deadline          DateTime?

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  SavedJobPost SavedJobPost[]
}

enum ExperienceLevel {
  ENTRY
  JUNIOR
  MID
  SENIOR
  EXECUTIVE
}

enum EducationLevel {
  HIGH_SCHOOL
  BACHELOR
  MASTER
  PHD
  OTHER
}

enum JobPostStatus {
  DRAFT
  ACTIVE
  EXPIRED
}

model SavedJobPost {
  id     String @id @default(uuid())
  jobId  String
  userId String

  job  JobPost @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, jobId])
}

model Education {
  id          String    @id @default(uuid())
  institution String
  degree      String
  fieldOfStudy String
  startDate   DateTime
  endDate     DateTime?
  jobSeeker   JobSeeker @relation(fields: [jobSeekerId], references: [id])
  jobSeekerId String
}

model JobApplication {
  id          String    @id @default(uuid())
  jobPost     JobPost   @relation(fields: [jobPostId], references: [id])
  jobPostId   String
  jobSeeker   JobSeeker @relation(fields: [jobSeekerId], references: [id])
  jobSeekerId String
  status      ApplicationStatus @default(PENDING)
  coverLetter String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Ajout du modèle pour les filtres de candidats
model CandidateFilter {
  id         String   @id @default(uuid())
  companyId  String
  company    Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  name       String   // Nom du filtre sauvegardé
  
  // Critères de filtrage
  skills          String[]
  experienceMin   Int?
  experienceMax   Int?
  availability    Availability[]
  jobTypes        JobType[]
  languages       String[]
  location        String?
  educationLevel  EducationLevel?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Modèle pour suivre les candidats consultés
model ViewedCandidate {
  id         String   @id @default(uuid())
  companyId  String
  company    Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  jobSeekerId String
  jobSeeker  JobSeeker @relation(fields: [jobSeekerId], references: [id], onDelete: Cascade)
  viewedAt   DateTime @default(now())
  
  @@unique([companyId, jobSeekerId])
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  SHORTLISTED
  INTERVIEWED
  ACCEPTED
  REJECTED
}

enum Availability {
  IMMEDIATE
  ONE_WEEK
  TWO_WEEKS
  ONE_MONTH
  MORE_THAN_ONE_MONTH
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  FREELANCE
  INTERNSHIP
  
}